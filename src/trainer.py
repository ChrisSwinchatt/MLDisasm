#!/usr/bin/env python3

'''
Usage: {0} <model>
'''

import os
import sys
import traceback as tb
import warnings

from sklearn.model_selection import GridSearchCV

# Filter out debug messages from TF.
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'

# Ignore warnings generated by using a different NumPy version.
warnings.filterwarnings("ignore", message="numpy.dtype size changed")
warnings.filterwarnings("ignore", message="numpy.ufunc size changed")

if __name__ == '__main__':
    print('*** Starting up...')

import tensorflow               as tf
import tensorflow.keras.backend as K

import mldisasm.benchmarks.profiling as     profiling
from   mldisasm.benchmarks.profiling import prof
import mldisasm.io.log               as     log
from   mldisasm.io.file_manager      import FileManager
from   mldisasm.model                import make_sklearn_disassembler

def train_model(config, tokens, X, y):
    '''
    Train a model.
    '''
    # Create a model and build the execution graph.
    model = make_sklearn_disassembler(
        **config['model'],
        tokens     = tokens,
        batch_size = config['batch_size'],
        seq_len    = config['seq_len'],
        mask_value = config['mask_value'],
    )
    # Run the graph over each example/target pair.
    log.info('Training model by grid-search')
    grid = GridSearchCV(model, config['grid'], config['scoring'])
    grid.fit(X, y)
    # Log results.
    log.info('Best parameters were {} (scoring {})'.format(grid.best_params_, grid.best_score_))
    return grid.best_estimator_

def load_datasets(model_name, config, file_mgr):
    '''
    Load training and token sets.
    '''
    log.info('Loading training set')
    X, y = file_mgr.load_training(model_name)
    tokens = file_mgr.load_tokens(**config)
    return X, y, tokens

def select_device(config):
    '''
    Select a TensorFlow device according to configuration.
    '''
    log.info('Checking TensorFlow device configuration (this can take some time)')
    preferred = config['preferred_device']
    fallback  = config['fallback_device']
    if 'gpu' in preferred.lower() and not tf.test.is_gpu_available():
        if fallback is None:
            log.error('Preferred device \'{}\' is not available and no fallback device was specified, stopping.')
            exit(1)
        log.warning('Preferred device \'{}\' is not available, falling back to \'{}\''.format(
            preferred,
            fallback
        ))
        return fallback
    log.info('Preferred TensorFlow device \'{}\' is available'.format(preferred))
    return preferred

def start_training(model_name, file_mgr):
    '''
    Start training process.
    '''
    # Load configuration and set TF device.
    config = file_mgr.load_config()
    select_device(config)
    # Initialise profiler.
    profiling.init(config['prof_time'], config['prof_mem'])
    # Load datasets, train & save model.
    X, y, tokens = load_datasets(model_name, config, file_mgr)
    with tf.Session() as session:
        K.set_session(session)
        K.set_learning_phase(1)
        session.run(tf.global_variables_initializer())
        model = train_model(config, tokens, X, y)
        file_mgr.save_model(model, model_name)

def read_command_line():
    '''
    Get the model name from the command-line.
    '''
    if len(sys.argv) != 2:
        print(__doc__.format(sys.argv[0]), file=sys.stderr)
        exit(1)
    return sys.argv[1]

if __name__ == '__main__':
    # Read command-line args.
    model_name = read_command_line()
    # Start file manager & logging.
    file_mgr = FileManager()
    log.init(file_mgr.open_log())
    # Train a model.
    try:
        start_training(model_name, file_mgr)
    except Exception as e:
        log.debug('====================[ UNCAUGHT EXCEPTION ]====================')
        log.error('Uncaught exception \'{}\': {}'.format(type(e).__name__, str(e).split('\n')[0]))
        log.error('See the log at {} for details.'.format(file_mgr.log_file_path))
        log.debug('Exception Traceback:\n{}'.format(''.join(tb.format_tb(e.__traceback__))))
        exit(1)
