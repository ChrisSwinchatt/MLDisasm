#!/usr/bin/env python3

'''
Usage: {0} <model>
'''

import os
import sys
import traceback as tb
import warnings

# Filter out debug messages from TF.
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'

# Ignore warnings generated by using a different NumPy version.
warnings.filterwarnings("ignore", message="numpy.dtype size changed")
warnings.filterwarnings("ignore", message="numpy.ufunc size changed")

if __name__ == '__main__':
    print('*** Starting up...')

import tensorflow as tf

if os.environ.get('MLD_DEBUG', '0') == '1':
    tf.enable_eager_execution()

import mldisasm.benchmarks.profiling as     profiling
from   mldisasm.benchmarks.profiling import prof
from   mldisasm.io.codec             import AsciiCodec, BytesCodec
import mldisasm.io.log               as     log
from   mldisasm.io.file_manager      import FileManager
from   mldisasm.model.disassembler   import Disassembler

def read_command_line():
    '''
    Get the model name from the command-line.
    '''
    if len(sys.argv) != 2:
        print(__doc__.format(sys.argv[0]), file=sys.stderr)
        exit(1)
    return sys.argv[1]

def select_device(config):
    '''
    Select a TensorFlow device according to configuration.
    '''
    log.info('Checking TensorFlow device configuration (this can take some time)')
    preferred = config['preferred_device']
    fallback = config['fallback_device']
    if 'gpu' in preferred.lower() and not tf.test.is_gpu_available():
        if fallback is None:
            log.error('Preferred device \'{}\' is not available and no fallback device was specified, stopping.')
            exit(1)
        log.warning('Preferred device \'{}\' is not available, falling back to \'{}\''.format(
            preferred,
            fallback
        ))
        return fallback
    log.info('Running TensorFlow on preferred device \'{}\''.format(preferred))
    return preferred

def train_model(tset, n_epochs, y_codec, session=None):
    '''
    Train a model.
    '''
    # Create a model.
    model = Disassembler(decoder=y_codec, **config['model'])
    for epoch in range(1, n_epochs + 1):
        total_loss = 0
        batch_num  = 1
        log.info('Epoch {} of {}'.format(epoch,n_epochs))
        p = prof('Epoch {} finished with loss={}', epoch, total_loss)
        for X, y in tset:
            log.info('`- Batch {} of {}'.format(batch_num, tset.num_batches))
            total_loss = model.train(X, y)
            if session:
                session.run(total_loss)
            batch_num += 1
        p.end()

def start_training(tset, config, y_codec):
    '''
    Train a model within a TF session.
    '''
    device   = select_device(config)
    n_epochs = config['epochs']
    with tf.device(device), tf.Session() as session:
        train_model(tset, n_epochs, y_codec, session)

if __name__ == '__main__':
    # Read command-line args.
    model_name = read_command_line()
    # Start file manager & logging.
    file_mgr   = FileManager()
    log.init(file_mgr.open_log())
    try:
        # Read configuration & load training data.
        config  = file_mgr.load_config(model_name)
        profiling.init(config['prof_time'], config['prof_mem'])
        tokens  = file_mgr.load_tokens(model_name, **config)
        x_codec = BytesCodec(config['seq_len'])
        y_codec = AsciiCodec(config['seq_len'], tokens)
        tset    = file_mgr.open_training(
            model_name,
            batch_size=config['batch_size'],
            x_encoder=x_codec,
            y_encoder=y_codec
        )
        # Begin training.
        start_training(tset, config, y_codec)
    except Exception as e:
        log.debug('====================[ UNCAUGHT EXCEPTION ]====================')
        log.error('Uncaught exception \'{}\': {}'.format(type(e).__name__, ' '.join(e.args)))
        log.error('See the log at {} for details.'.format(file_mgr.log_file_path))
        log.debug('Exception Traceback:\n{}'.format(''.join(tb.format_tb(e.__traceback__))))
        exit(1)
